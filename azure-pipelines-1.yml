trigger:
- prod

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  publishDirectory: '$(build.artifactStagingDirectory)/publish'

jobs:
- job: Build
  displayName: 'Build and Publish ASP.NET Core Solution'
  steps:
  - task: NuGetToolInstaller@1  # Ensure NuGet is installed

  - task: NuGetCommand@2  # Restore NuGet packages
    inputs:
      restoreSolution: '$(solution)'

  - task: DotNetCoreCLI@2  # Use .NET CLI to publish the project
    inputs:
      command: 'publish'
      projects: '$(solution)'  # Publish all projects in the solution
      arguments: '--output $(publishDirectory) --configuration $(buildConfiguration)'

  - task: PublishBuildArtifacts@1  # Publish the build artifact
    inputs:
      pathToPublish: '$(publishDirectory)'
      artifactName: 'PublishArtifacts'  # Name for the published artifact
      publishLocation: 'Container'  # Publish to the Azure DevOps artifact container

- job: CopyOutput
  displayName: 'Copy Published Files to specific directory'
  dependsOn: Build  # This job runs only if the build is successful
  pool:
    name: 'jaison'  # Using agents

  steps:
  - task: DownloadBuildArtifacts@0  # Download the build artifact
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'PublishArtifacts'  # Name of the artifact to download
      downloadPath: '$(Pipeline.Workspace)'  # Download location on the agent

  - task: CopyFiles@2
    inputs:
      SourceFolder: 'C:\inetpub\wwwroot\Scaffolder'
      Contents: 'C:\inetpub\wwwroot\Scaffolder'
      TargetFolder: 'C:\backup'
      CleanTargetFolder: true
      OverWrite: true
      flattenFolders: true
      preserveTimestamp: true
      ignoreMakeDirErrors: true

  - task: PowerShell@2  # Stop IIS to avoid file locks
    inputs:
      targetType: 'inline'
      script: |
        iisreset /STOP  # Stop IIS to ensure no files are in use

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Pipeline.Workspace)\PublishArtifacts\Scaffolder.zip'
      destinationFolder: 'C:\inetpub\wwwroot\Scaffolder'
      cleanDestinationFolder: true
      overwriteExistingFiles: true

  - task: PowerShell@2  # Start IIS after extraction
    inputs:
      targetType: 'inline'
      script: |
        iisreset /START  # Start IIS after extracting files






