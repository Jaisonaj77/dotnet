trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  publishDirectory: '$(build.artifactStagingDirectory)/publish'

jobs:
- job: Build
  displayName: 'Build and Publish ASP.NET Core Solution'
  steps:
  - task: NuGetToolInstaller@1  # Ensure NuGet is installed

  - task: NuGetCommand@2  # Restore NuGet packages
    inputs:
      restoreSolution: '$(solution)'

  - task: DotNetCoreCLI@2  # Use .NET CLI to publish the project
    inputs:
      command: 'publish'
      projects: '$(solution)'  # Publish all projects in the solution
      arguments: '--output $(publishDirectory) --configuration $(buildConfiguration)'

  - task: PublishBuildArtifacts@1  # Publish the build artifact
    inputs:
      pathToPublish: '$(publishDirectory)'
      artifactName: 'PublishArtifacts'  # Name for the published artifact
      publishLocation: 'Container'  # Publish to the Azure DevOps artifact container

- job: CopyOutput
  displayName: 'Extract and Copy Artifact to IIS'
  pool:
    vmImage: 'windows-latest'

  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'PublishArtifacts'
      downloadPath: '$(Pipeline.Workspace)'  # Location to download the artifact




  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        $zipFilePath = "$(Pipeline.Workspace)/PublishArtifacts/Scaffolder.zip"
        $targetPath = 'C:\azuredevops'

        # Ensure the target directory exists or create it
        if (-not (Test-Path $targetPath)) {
          New-Item -Path $targetPath -ItemType Directory
        }

        # Ensure the zip file exists
        if (-not (Test-Path $zipFilePath)) {
          throw "Zip file not found at $zipFilePath. Ensure the file was downloaded correctly."
        }

        # Create a Shell.Application COM object to extract the zip file
        $shell = New-Object -ComObject Shell.Application

        # Check if the COM object was created successfully
        if ($shell -eq $null) {
          throw "Failed to create the Shell.Application COM object. Ensure it's available on this system."
        }

        $zip = $shell.NameSpace($zipFilePath)

        # Check if the zip was opened successfully
        if ($zip -eq $null) {
          throw "Failed to open the zip file. Ensure the file is valid and accessible."
        }

        $destination = $shell.NameSpace($targetPath)

        # Ensure the destination is accessible
        if ($destination -eq $null) {
          throw "Failed to access the target directory. Check permissions or path issues."
        }

        # Extract the contents from the zip file
        foreach ($item in $zip.Items()) {
          try {
            $destination.CopyHere($item, 4 + 16)  # Overwrite existing items and show errors
          } catch {
            throw "Failed to copy item $($item.Name) to $targetPath: $_.Exception.Message"
          }
        }

        Write-Output "Successfully extracted contents to $targetPath."
