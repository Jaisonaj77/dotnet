
trigger:
- main  # Adjust as needed

pool:
  vmImage: 'windows-latest'  # Using Microsoft-hosted agent pool

variables:
  solution: '**/*.sln'  # Path to the solution file(s)
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

jobs:
- job: Build
  displayName: 'Build ASP.NET Core Solution'
  steps:
  - task: NuGetToolInstaller@1  # Ensure NuGet is installed

  - task: NuGetCommand@2  # Restore NuGet packages
    inputs:
      restoreSolution: '$(solution)'

  - task: VSBuild@1  # Build the solution and create a deployment package
    inputs:
      solution: '$(solution)'
      msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)"'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'



  - task: PublishBuildArtifacts@1  # Publish the build artifact
    inputs:
      pathToPublish: '$(build.artifactStagingDirectory)'
      publishLocation: 'Container'  # Publish to the Azure DevOps artifact container

# Example deployment or copying job (optional)
- job: CopyOutput
  displayName: 'Copy Artifact to Another Location'
  dependsOn: Build  # This job only runs if the build is successful
  pool:
    name: 'jaison'  # Agent pool where you want to copy the output

  steps:
  - task: DownloadBuildArtifacts@0  # Download the build artifact
    inputs:
      buildType: 'current'  # Download the artifact from the current build
      downloadPath: '$(Pipeline.Workspace)'  # Download location on the agent

  - task: PowerShell@2  # Copy the artifact to a specific location
    inputs:
      targetType: 'inline'
      script: |
        $sourcePath = "$(Pipeline.Workspace)"
        $targetPath = 'C:\work'  # Adjust this to where you want to copy

        # Copy the artifact to the specified location
        Copy-Item -Path $sourcePath -Destination $targetPath -Recurse -Force

