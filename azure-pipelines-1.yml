trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  publishDirectory: '$(build.artifactStagingDirectory)/publish'

jobs:
- job: Build
  displayName: 'Build and Publish ASP.NET Core Solution'
  steps:
  - task: NuGetToolInstaller@1  # Ensure NuGet is installed

  - task: NuGetCommand@2  # Restore NuGet packages
    inputs:
      restoreSolution: '$(solution)'

  - task: DotNetCoreCLI@2  # Use .NET CLI to publish the project
    inputs:
      command: 'publish'
      projects: '$(solution)'  # Publish all projects in the solution
      arguments: '--output $(publishDirectory) --configuration $(buildConfiguration)'

  - task: PublishBuildArtifacts@1  # Publish the build artifact
    inputs:
      pathToPublish: '$(publishDirectory)'
      artifactName: 'PublishArtifacts'  # Name for the published artifact
      publishLocation: 'Container'  # Publish to the Azure DevOps artifact container

- job: CopyOutput
  displayName: 'Copy Published Files to specific directory'
  dependsOn: Build  # This job runs only if the build is successful
  pool:
    name: 'jaison'  # Using agents

  steps:
  - task: DownloadBuildArtifacts@0  # Download the build artifact
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'PublishArtifacts'  # Name of the artifact to download
      downloadPath: '$(Pipeline.Workspace)'  # Download location on the agent

  - task: PowerShell@2  # Copy the published files to a specific location
    inputs:
      targetType: 'inline'
      script: |
        $sourcePath = "$(Pipeline.Workspace)/PublishArtifacts"  # Location of downloaded build artifact
        $targetPath = 'c:\azuredevops'  # Desired copy location

        # Ensure the target directory exists
        if (-not (Test-Path $targetPath)) {
          New-Item -Path $targetPath -ItemType Directory
        }

        # Extract the zip file to the target directory
        $shell = New-Object -ComObject Shell.Application
        $zip = $shell.NameSpace($zipFilePath)
        $destination = $shell.NameSpace($targetPath)

        foreach ($item in $zip.Items()) {
          $destination.CopyHere($item)
        }

        # Verify the contents were extracted successfully
        Write-Output "Contents extracted to $targetPath"


